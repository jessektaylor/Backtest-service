"""
Django settings for backtest project.

Generated by 'django-admin startproject' using Django 3.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
TEMPLATE_DIR = os.path.join(BASE_DIR,'templates')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '=vbb!8sle330^e3lmf6a40vp(tj#!p8=!l2vorhj*5y$g6zo^7'


# SECURITY WARNING: don't run with debug turned on in production!
if os.getenv('isonline')=='isonline':
    DEBUG = False
else:
    DEBUG = True


ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'channels',
    'historical',
    'live',
    'API',
    'rest_framework',
    'background_task',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backtest.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


# WSGI_APPLICATION = 'backtest.wsgi.application'
ASGI_APPLICATION = 'backtest.routing.application'  
# Channel layer used for websockets 
if os.getenv('isonline')=='isonline': # if hosted on cloud var is found then assign the hosts for cloud use
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                "hosts": [('redis-release-master.default.svc.cluster.local',6379)], # used for pods DNS communication
            },
        },
    }
else:
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                "hosts": [('localhost', 6379)], # localhost is used with docker containers comunicating
            },
        },
    }

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

############################################################
### SET SWITCH BELOW >>>>'comment out one switch line'   ###
############################################################
# switch = 'off'  # CONNECTS TO LOCALY HOSTED POSTGRES DATABASE
switch = 'on' # CONNECTS TO GOOGLE CLOUD POSTGRESS HOSTED DATABASE
"""
    SET SWITCH--> 'OFF' TO BUILD AND USE LOCALY HOSTED DATABASE
    SET SWITC-->  'ON' TO RUN LOCALLY BUT CONECT TO DATABASE HOSTED ON CLOUD
"""
############################################################
 # 'isonline' global varible that exists only on GOOGlE Cloud
if os.getenv('isonline')=='isonline':
    DATABASES = {
        'default': {
            'ENGINE':'django.db.backends.postgresql',
            'HOST':'localhost',
            'USER':os.getenv('db_user'),
            'PASSWORD':os.getenv('db_password'),
            'NAME':os.getenv('db_name'),
            'PORT':5432,
        }
    }
 # 'is_docker_composed' global varible that exists only LCOALY
elif os.getenv('is_docker_composed')=='is_docker_composed' and switch=='on':
    print('requesting connectiong from main-database-1 through google Cloud Proxy ')
    print('This is running as a side car container via Docker-compose')
    DATABASES = {
        'default': {
            'ENGINE':'django.db.backends.postgresql',
            'HOST':'cloud-sql-proxy',
            'USER':os.getenv('USER'),
            'PASSWORD':os.getenv('PASSWORD'),
            'NAME':os.getenv('NAME'),
            'PORT':5432,
        }
    }
# switch is off use container with Postgress hosted Locally
else: 
    if switch == 'off' and os.getenv('isonline')!='isonline': 
        print('using postgres database created inside container')
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': 'postgres',
                'USER': 'postgres',
                'HOST': 'postgres_db',
                'PORT': 5432,
            }
        }
    else:
        print(' A database must be selected review the setting file.')

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
BACKGROUND_TASK_RUN_ASYNC = True 
